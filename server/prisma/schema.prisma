// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id               String         @id
  name             String
  email            String         @unique
  password         String
  role             String         @default("VIEWER")
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  Account          Account[]
  JournalEntry     JournalEntry[]
  Transaction      Transaction[]
  UserBusiness     UserBusiness[]
  OwnedBusinesses  Business[]     @relation("BusinessOwner")
  CreditCards      CreditCard[]
  CreditCardTransactions CreditCardTransaction[]
  MappingRule      MappingRule[]
  ThirdParties     ThirdParty[]
  Customers        Customer[]
  Vendors          Vendor[]
  Invoices         Invoice[]
  Bills            Bill[]
  InvoicePayments  InvoicePayment[]
  BillPayments     BillPayment[]
  Reconciliations  Reconciliation[]
}

model MappingRule {
  id          String   @id @default(cuid())
  userId      String
  keyword     String   // The keyword to look for in the transaction description
  accountId   String   // The ID of the account to map to
  account     Account  @relation(fields: [accountId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([accountId])
}

// Account Head Category (Asset, Liability, Income, Expense, Equity)
model AccountCategory {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AccountHead AccountHead[]
}

// Account Heads (e.g., Cash, Bank, Accounts Receivable, etc.)
model AccountHead {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  type        String   // asset, liability, equity, revenue, expense
  description String?
  categoryId  String
  category    AccountCategory @relation(fields: [categoryId], references: [id])
  parentId    String?
  parent      AccountHead? @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    AccountHead[] @relation("AccountHierarchy")
  businessId  String?
  business    Business? @relation(fields: [businessId], references: [id])
  isCustom    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  debitJournalEntries  JournalEntry[] @relation("DebitAccount")
  creditJournalEntries JournalEntry[] @relation("CreditAccount")

  @@index([code])
  @@index([categoryId])
  @@index([businessId])
  @@index([type])
}

// Customer model for invoice management
model Customer {
  id            String   @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  taxId         String?  // Customer's tax ID/GST number
  creditLimit   Float?   // Credit limit for the customer
  paymentTerms  Int      @default(30) // Payment terms in days
  userId        String
  businessId    String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  User          User     @relation(fields: [userId], references: [id])
  Business      Business? @relation(fields: [businessId], references: [id])
  Invoices      Invoice[]

  @@index([userId])
  @@index([businessId])
  @@index([isActive])
}

// Vendor model for bill management
model Vendor {
  id            String   @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  taxId         String?  // Vendor's tax ID/GST number
  paymentTerms  Int      @default(30) // Payment terms in days
  userId        String
  businessId    String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  User          User     @relation(fields: [userId], references: [id])
  Business      Business? @relation(fields: [businessId], references: [id])
  Bills         Bill[]

  @@index([userId])
  @@index([businessId])
  @@index([isActive])
}

// Third Party model for managing third-party entities
model ThirdParty {
  id            String   @id @default(uuid())
  name          String
  type          String   // CLIENT, FAMILY, FRIEND, BUSINESS_PARTNER, OTHER
  email         String?
  phone         String?
  address       String?
  notes         String?
  userId        String   // User who created this third-party record
  businessId    String?  // Optional: Associated business
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  User          User     @relation(fields: [userId], references: [id])
  Business      Business? @relation(fields: [businessId], references: [id])
  Transactions  Transaction[]

  @@index([userId])
  @@index([businessId])
  @@index([type])
  @@index([isActive])
}

// Business model for multi-tenant support
model Business {
  id                String   @id @default(uuid())
  name              String
  type              String
  registrationNumber String?
  description       String?
  incorporationDate DateTime?
  fiscalYearStart   DateTime?
  fiscalYearEnd     DateTime?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  taxId             String?
  phone             String?
  email             String?
  website           String?
  ownerId           String
  owner             User     @relation("BusinessOwner", fields: [ownerId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  Users             UserBusiness[]
  Accounts          Account[]
  AccountHead       AccountHead[]
  JournalEntries    JournalEntry[]
  Transactions      Transaction[]
  ThirdParties      ThirdParty[]
  Customers         Customer[]
  Vendors           Vendor[]
  Invoices          Invoice[]
  Bills             Bill[]
  CreditCards       CreditCard[]
  Reconciliations  Reconciliation[]

  @@index([ownerId])
  @@index([type])
}

// User-Business relationship for multi-tenant access
model UserBusiness {
  id          String   @id @default(uuid())
  userId      String
  businessId  String
  role        String   @default("VIEWER") // ADMIN, BUSINESS_OWNER, ACCOUNTANT, VIEWER
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  User        User     @relation(fields: [userId], references: [id])
  Business    Business @relation(fields: [businessId], references: [id])

  @@unique([userId, businessId])
  @@index([userId])
  @@index([businessId])
  @@index([role])
}

// Journal Entry model for double-entry bookkeeping
model JournalEntry {
  id              String   @id @default(uuid())
  date            DateTime
  reference       String?
  referenceNumber String?  @unique
  description     String
  debitAccountId  String
  debitAccount    AccountHead @relation("DebitAccount", fields: [debitAccountId], references: [id])
  creditAccountId String
  creditAccount   AccountHead @relation("CreditAccount", fields: [creditAccountId], references: [id])
  amount          Float
  gstAmount       Float?   // GST amount if applicable
  tdsAmount       Float?   // TDS amount if applicable
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  businessId      String?
  business        Business? @relation(fields: [businessId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([date])
  @@index([userId])
  @@index([businessId])
  @@index([debitAccountId])
  @@index([creditAccountId])
}

// Invoice model
model Invoice {
  id              String   @id @default(uuid())
  invoiceNumber   String   @unique
  customerId      String
  customer        Customer @relation(fields: [customerId], references: [id])
  issueDate       DateTime
  dueDate         DateTime
  status          String   @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  subtotal        Float
  taxAmount       Float    @default(0)
  discountAmount  Float    @default(0)
  totalAmount     Float
  paidAmount      Float    @default(0)
  balanceAmount   Float    // totalAmount - paidAmount
  notes           String?
  terms           String?  // Payment terms and conditions
  userId          String
  businessId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  User            User     @relation(fields: [userId], references: [id])
  Business        Business? @relation(fields: [businessId], references: [id])
  InvoiceItems    InvoiceItem[]
  InvoicePayments InvoicePayment[]

  @@index([invoiceNumber])
  @@index([customerId])
  @@index([status])
  @@index([dueDate])
  @@index([userId])
  @@index([businessId])
}

// Invoice Item model
model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Float
  unitPrice   Float
  amount      Float   // quantity * unitPrice
  taxRate     Float   @default(0)
  taxAmount   Float   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([invoiceId])
}

// Invoice Payment model
model InvoicePayment {
  id            String   @id @default(uuid())
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  paymentDate   DateTime
  amount        Float
  paymentMethod String   // CASH, BANK_TRANSFER, CHEQUE, CARD, etc.
  reference     String?  // Payment reference number
  notes         String?
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([invoiceId])
  @@index([paymentDate])
  @@index([userId])
}

// Bill model
model Bill {
  id              String   @id @default(uuid())
  billNumber      String   // Vendor's bill number
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  billDate        DateTime
  dueDate         DateTime
  status          String   @default("RECEIVED") // RECEIVED, APPROVED, PAID, OVERDUE
  subtotal        Float
  taxAmount       Float    @default(0)
  discountAmount  Float    @default(0)
  totalAmount     Float
  paidAmount      Float    @default(0)
  balanceAmount   Float    // totalAmount - paidAmount
  notes           String?
  userId          String
  businessId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  User            User     @relation(fields: [userId], references: [id])
  Business        Business? @relation(fields: [businessId], references: [id])
  BillItems       BillItem[]
  BillPayments    BillPayment[]

  @@index([billNumber])
  @@index([vendorId])
  @@index([status])
  @@index([dueDate])
  @@index([userId])
  @@index([businessId])
}

// Bill Item model
model BillItem {
  id          String @id @default(uuid())
  billId      String
  bill        Bill   @relation(fields: [billId], references: [id], onDelete: Cascade)
  description String
  quantity    Float
  unitPrice   Float
  amount      Float  // quantity * unitPrice
  taxRate     Float  @default(0)
  taxAmount   Float  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([billId])
}

// Bill Payment model
model BillPayment {
  id            String   @id @default(uuid())
  billId        String
  bill          Bill     @relation(fields: [billId], references: [id])
  paymentDate   DateTime
  amount        Float
  paymentMethod String   // CASH, BANK_TRANSFER, CHEQUE, CARD, etc.
  reference     String?  // Payment reference number
  notes         String?
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([billId])
  @@index([paymentDate])
  @@index([userId])
}

// Reconciliation model
model Reconciliation {
  id            String   @id @default(uuid())
  accountId     String
  statementDate DateTime
  closingBalance Float
  isLocked      Boolean  @default(false)
  userId        String
  businessId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  User          User     @relation(fields: [userId], references: [id])
  Business      Business? @relation(fields: [businessId], references: [id])
  account       Account  @relation(fields: [accountId], references: [id])
  statementLines ReconciliationStatementLine[]

  @@index([accountId])
  @@index([statementDate])
  @@index([userId])
  @@index([businessId])
}

// Reconciliation Statement Line model
model ReconciliationStatementLine {
  id              String   @id @default(uuid())
  reconciliationId String
  reconciliation   Reconciliation @relation(fields: [reconciliationId], references: [id])
  description     String
  amount          Float
  type            String   // DEBIT, CREDIT
  transactionId   String?
  isMatched       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([reconciliationId])
  @@index([transactionId])
}

// Transaction model for manual transaction entry
model Transaction {
  id              String   @id @default(uuid())
  date            DateTime
  description     String
  amount          Float
  category        String
  transactionType String
  paymentMethod   String?  // Payment method (cash, check, bank_transfer, credit_card, other)
  reference       String?  // Reference number or additional identifier
  accountId       String?  // Optional: Link to a specific account
  userId          String
  businessId      String?
  
  // Third-party tagging fields
  isThirdParty    Boolean  @default(false)
  thirdPartyName  String?  // Name of the person/entity on whose behalf transaction was done
  thirdPartyType  String?  // Type: CLIENT, FAMILY, FRIEND, BUSINESS_PARTNER, OTHER
  thirdPartyId    String?  // Optional: Link to a third-party entity record
  notes           String?  // Additional notes about the third-party transaction
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User     @relation(fields: [userId], references: [id])
  Business        Business? @relation(fields: [businessId], references: [id])
  ThirdParty      ThirdParty? @relation(fields: [thirdPartyId], references: [id])
  Account         Account? @relation(fields: [accountId], references: [id])

  @@index([category])
  @@index([date])
  @@index([transactionType])
  @@index([userId])
  @@index([businessId])
  @@index([isThirdParty])
  @@index([thirdPartyType])
  @@index([paymentMethod])
  @@index([accountId])
}

model Account {
  id            String         @id @default(uuid())
  name          String
  type          String
  code          String         @unique
  userId        String
  businessId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User           @relation(fields: [userId], references: [id])
  Business      Business?      @relation(fields: [businessId], references: [id])
  MappingRule   MappingRule[]
  Transactions  Transaction[]
  Reconciliations Reconciliation[]

  @@index([code])
  @@index([type])
  @@index([userId])
  @@index([businessId])
}

// Credit Card model
model CreditCard {
  id                String   @id @default(uuid())
  cardName          String   // Name of the card
  cardNumber        String?
  cardType          String   // VISA, MASTERCARD, AMEX, etc.
  bankName          String
  creditLimit       Float    @default(0)
  outstandingAmount Float    @default(0)
  statementDate     DateTime?
  dueDate           Int?     // Day of month when payment is due
  userId            String
  businessId        String?
  user              User     @relation(fields: [userId], references: [id])
  business          Business? @relation(fields: [businessId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  transactions      CreditCardTransaction[]

  @@index([userId])
  @@index([cardType])
  @@index([bankName])
  @@index([businessId])
}

// Credit Card Transaction model
model CreditCardTransaction {
  id              String   @id @default(uuid())
  date            DateTime
  description     String
  amount          Float
  type            String   // PURCHASE, PAYMENT, FEE, INTEREST, CASH_ADVANCE
  category        String?
  merchant        String?  // Merchant name
  reference       String?  // Reference number
  creditCardId    String
  creditCard      CreditCard @relation(fields: [creditCardId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([date])
  @@index([type])
  @@index([category])
  @@index([creditCardId])
  @@index([userId])
}