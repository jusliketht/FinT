// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id               String         @id
  name             String
  email            String         @unique
  password         String
  role             String         @default("VIEWER")
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  Account          Account[]
  JournalEntry     JournalEntry[]
  Transaction      Transaction[]
  UserBusiness     UserBusiness[]
  OwnedBusinesses  Business[]     @relation("BusinessOwner")
  CreditCards      CreditCard[]
  CreditCardTransactions CreditCardTransaction[]
  MappingRule      MappingRule[]
  ThirdParties     ThirdParty[]
}

model MappingRule {
  id          String   @id @default(cuid())
  userId      String
  keyword     String   // The keyword to look for in the transaction description
  accountId   String   // The ID of the account to map to
  account     Account  @relation(fields: [accountId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([accountId])
}

// Account Head Category (Asset, Liability, Income, Expense, Equity)
model AccountCategory {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AccountHead AccountHead[]
}

// Account Heads (e.g., Cash, Bank, Accounts Receivable, etc.)
model AccountHead {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  type        String   // asset, liability, equity, revenue, expense
  description String?
  categoryId  String
  category    AccountCategory @relation(fields: [categoryId], references: [id])
  parentId    String?
  parent      AccountHead? @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    AccountHead[] @relation("AccountHierarchy")
  businessId  String?
  business    Business? @relation(fields: [businessId], references: [id])
  isCustom    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  debitJournalEntries  JournalEntry[] @relation("DebitAccount")
  creditJournalEntries JournalEntry[] @relation("CreditAccount")

  @@index([code])
  @@index([categoryId])
  @@index([businessId])
  @@index([type])
}

// Third Party model for managing third-party entities
model ThirdParty {
  id            String   @id @default(uuid())
  name          String
  type          String   // CLIENT, FAMILY, FRIEND, BUSINESS_PARTNER, OTHER
  email         String?
  phone         String?
  address       String?
  notes         String?
  userId        String   // User who created this third-party record
  businessId    String?  // Optional: Associated business
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  User          User     @relation(fields: [userId], references: [id])
  Business      Business? @relation(fields: [businessId], references: [id])
  Transactions  Transaction[]

  @@index([userId])
  @@index([businessId])
  @@index([type])
  @@index([isActive])
}

// Business model for multi-tenant support
model Business {
  id                String   @id @default(uuid())
  name              String
  type              String
  registrationNumber String?
  description       String?
  incorporationDate DateTime?
  fiscalYearStart   DateTime?
  fiscalYearEnd     DateTime?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  taxId             String?
  phone             String?
  email             String?
  website           String?
  ownerId           String
  owner             User     @relation("BusinessOwner", fields: [ownerId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  Users             UserBusiness[]
  Accounts          Account[]
  AccountHead       AccountHead[]
  JournalEntries    JournalEntry[]
  Transactions      Transaction[]
  ThirdParties      ThirdParty[]

  @@index([ownerId])
  @@index([type])
}

// User-Business relationship for multi-tenant access
model UserBusiness {
  userId      String
  businessId  String
  role        String   // ADMIN, BUSINESS_OWNER, ACCOUNTANT, VIEWER
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  User        User     @relation(fields: [userId], references: [id])
  Business    Business @relation(fields: [businessId], references: [id])

  @@id([userId, businessId])
  @@index([userId])
  @@index([businessId])
  @@index([role])
}

// Journal Entry model for double-entry bookkeeping
model JournalEntry {
  id              String   @id @default(uuid())
  date            DateTime
  reference       String?
  description     String
  debitAccountId  String
  debitAccount    AccountHead @relation("DebitAccount", fields: [debitAccountId], references: [id])
  creditAccountId String
  creditAccount   AccountHead @relation("CreditAccount", fields: [creditAccountId], references: [id])
  amount          Float
  gstAmount       Float?   // GST amount if applicable
  tdsAmount       Float?   // TDS amount if applicable
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  businessId      String?
  business        Business? @relation(fields: [businessId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([date])
  @@index([userId])
  @@index([businessId])
  @@index([debitAccountId])
  @@index([creditAccountId])
}

// Transaction model for manual transaction entry
model Transaction {
  id              String   @id @default(uuid())
  date            DateTime
  description     String
  amount          Float
  category        String
  transactionType String
  userId          String
  businessId      String?
  
  // Third-party tagging fields
  isThirdParty    Boolean  @default(false)
  thirdPartyName  String?  // Name of the person/entity on whose behalf transaction was done
  thirdPartyType  String?  // Type: CLIENT, FAMILY, FRIEND, BUSINESS_PARTNER, OTHER
  thirdPartyId    String?  // Optional: Link to a third-party entity record
  notes           String?  // Additional notes about the third-party transaction
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User     @relation(fields: [userId], references: [id])
  Business        Business? @relation(fields: [businessId], references: [id])
  ThirdParty      ThirdParty? @relation(fields: [thirdPartyId], references: [id])

  @@index([category])
  @@index([date])
  @@index([transactionType])
  @@index([userId])
  @@index([businessId])
  @@index([isThirdParty])
  @@index([thirdPartyType])
}

model Account {
  id            String         @id @default(uuid())
  name          String
  type          String
  code          String         @unique
  userId        String
  businessId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User           @relation(fields: [userId], references: [id])
  Business      Business?      @relation(fields: [businessId], references: [id])
  MappingRule   MappingRule[]

  @@index([code])
  @@index([type])
  @@index([userId])
  @@index([businessId])
}

// Credit Card model
model CreditCard {
  id              String   @id @default(uuid())
  name            String
  cardNumber      String?
  cardType        String   // VISA, MASTERCARD, AMEX, etc.
  bankName        String?
  creditLimit     Float?
  dueDate         Int?     // Day of month when payment is due
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  transactions    CreditCardTransaction[]

  @@index([userId])
  @@index([cardType])
}

// Credit Card Transaction model
model CreditCardTransaction {
  id              String   @id @default(uuid())
  date            DateTime
  description     String
  amount          Float
  type            String   // PURCHASE, PAYMENT, FEE, INTEREST, CASH_ADVANCE
  category        String?
  creditCardId    String
  creditCard      CreditCard @relation(fields: [creditCardId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([date])
  @@index([type])
  @@index([category])
}