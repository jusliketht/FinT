// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id               String         @id
  name             String
  email            String         @unique
  password         String
  role             String         @default("VIEWER")
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  Account          Account[]
  JournalEntry     JournalEntry[]
  Transaction      Transaction[]
  UserBusiness     UserBusiness[]
  OwnedBusinesses  Business[]     @relation("BusinessOwner")
  CreditCards      CreditCard[]
  CreditCardTransactions CreditCardTransaction[]
}

// Account Head Category (Asset, Liability, Income, Expense, Equity)
model AccountCategory {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AccountHead AccountHead[]
}

// Account Heads (e.g., Cash, Bank, Accounts Receivable, etc.)
model AccountHead {
  id                String             @id
  code              String             @unique
  name              String
  description       String?
  categoryId        String
  isCustom          Boolean            @default(false)
  parentId          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  AccountCategory   AccountCategory    @relation(fields: [categoryId], references: [id])
  AccountHead       AccountHead?       @relation("AccountHeadToAccountHead", fields: [parentId], references: [id])
  other_AccountHead AccountHead[]      @relation("AccountHeadToAccountHead")
  JournalEntryItem  JournalEntryItem[]
  LedgerEntry       LedgerEntry[]

  @@index([categoryId])
  @@index([parentId])
}

// Journal Entries
model JournalEntry {
  id               String             @id @default(uuid())
  date             DateTime
  description      String
  amount           Float
  debitAccountId   String
  creditAccountId  String
  userId           String
  businessId       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  creditAccount    Account            @relation("CreditAccount", fields: [creditAccountId], references: [id])
  debitAccount     Account            @relation("DebitAccount", fields: [debitAccountId], references: [id])
  User             User               @relation(fields: [userId], references: [id])
  Business         Business?          @relation(fields: [businessId], references: [id])
  JournalEntryItem JournalEntryItem[]
  
  // GST Fields (India-specific)
  gstRate          Float?             // GST rate (5%, 12%, 18%, 28%)
  gstAmount        Float?             // GST amount
  gstin            String?            // GSTIN (15-digit)
  hsnCode          String?            // HSN/SAC code
  placeOfSupply    String?            // Place of supply (state)
  isInterState     Boolean            @default(false) // IGST vs CGST+SGST
  
  // TDS Fields (India-specific)
  tdsSection       String?            // TDS section (194C, 194J, etc.)
  tdsRate          Float?             // TDS rate
  tdsAmount        Float?             // TDS amount
  panNumber        String?            // PAN number for TDS
  
  // Additional India-specific fields
  isMsmeVendor     Boolean            @default(false) // MSME vendor flag
  invoiceNumber    String?            // Invoice number
  vendorName       String?            // Vendor/supplier name

  @@index([creditAccountId])
  @@index([date])
  @@index([debitAccountId])
  @@index([userId])
  @@index([businessId])
  @@index([gstin])
}

// Journal Entry Items (individual debit/credit lines)
model JournalEntryItem {
  id             String       @id
  journalEntryId String
  accountHeadId  String
  description    String?
  debitAmount    Decimal      @default(0)
  creditAmount   Decimal      @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  AccountHead    AccountHead  @relation(fields: [accountHeadId], references: [id])
  JournalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])

  @@index([accountHeadId])
  @@index([journalEntryId])
}

// Ledger Entries (for running balances)
model LedgerEntry {
  id            String      @id
  accountHeadId String
  date          DateTime
  description   String
  debitAmount   Decimal     @default(0)
  creditAmount  Decimal     @default(0)
  balance       Decimal
  reference     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  AccountHead   AccountHead @relation(fields: [accountHeadId], references: [id])

  @@index([accountHeadId])
  @@index([date])
}

// Financial Year Settings
model FinancialYear {
  id        String   @id
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@unique([startDate, endDate])
  @@index([isActive])
}

// Company Settings
model CompanySettings {
  id              String   @id
  companyName     String
  address         String?
  taxNumber       String?
  phone           String?
  email           String?
  fiscalYearStart DateTime
  baseCurrency    String   @default("INR")
  createdAt       DateTime @default(now())
  updatedAt       DateTime
}

model Transaction {
  id              String   @id @default(uuid())
  date            DateTime
  description     String
  amount          Float
  category        String
  transactionType String
  userId          String
  businessId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User     @relation(fields: [userId], references: [id])
  Business        Business? @relation(fields: [businessId], references: [id])

  @@index([category])
  @@index([date])
  @@index([transactionType])
  @@index([userId])
  @@index([businessId])
}

model Account {
  id            String         @id @default(uuid())
  name          String
  type          String
  code          String         @unique
  userId        String
  businessId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User           @relation(fields: [userId], references: [id])
  Business      Business?      @relation(fields: [businessId], references: [id])
  creditEntries JournalEntry[] @relation("CreditAccount")
  debitEntries  JournalEntry[] @relation("DebitAccount")

  @@index([code])
  @@index([type])
  @@index([userId])
  @@index([businessId])
}

// Business model for multi-tenant support
model Business {
  id                String         @id @default(uuid())
  name              String
  registrationNumber String?        @unique
  type              String         // sole_proprietorship, partnership, corporation, llc
  description       String?
  incorporationDate DateTime?
  fiscalYearStart   DateTime?
  fiscalYearEnd     DateTime?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  taxId             String?
  phone             String?
  email             String?
  website           String?
  ownerId           String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  Owner             User           @relation("BusinessOwner", fields: [ownerId], references: [id])
  Users             UserBusiness[]
  Accounts          Account[]
  JournalEntries    JournalEntry[]
  Transactions      Transaction[]
  CreditCards       CreditCard[]

  @@index([ownerId])
  @@index([type])
}

// User-Business relationship for multi-tenant support
model UserBusiness {
  id         String   @id @default(uuid())
  userId     String
  businessId String
  role       String   @default("VIEWER") // ADMIN, BUSINESS_OWNER, ACCOUNTANT, VIEWER
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Business  Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
  @@index([userId])
  @@index([businessId])
  @@index([role])
}

// Credit Card Management
model CreditCard {
  id                String                    @id @default(uuid())
  cardName          String
  cardNumber        String?                   // Last 4 digits only
  cardType          String                    // Visa, Mastercard, Amex, RuPay
  bankName          String
  creditLimit       Float                     @default(0)
  outstandingAmount Float                     @default(0)
  dueDate           DateTime?
  statementDate     DateTime?
  userId            String
  businessId        String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  
  // Relations
  User              User                      @relation(fields: [userId], references: [id])
  Business          Business?                 @relation(fields: [businessId], references: [id])
  transactions      CreditCardTransaction[]

  @@index([userId])
  @@index([businessId])
  @@index([cardType])
  @@index([bankName])
}

model CreditCardTransaction {
  id            String      @id @default(uuid())
  date          DateTime
  description   String
  amount        Float
  type          String      // DEBIT (purchase) or CREDIT (payment)
  category      String?
  merchant      String?
  reference     String?
  creditCardId  String
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  creditCard    CreditCard  @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  User          User        @relation(fields: [userId], references: [id])

  @@index([creditCardId])
  @@index([userId])
  @@index([date])
  @@index([type])
  @@index([category])
} 