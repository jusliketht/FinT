// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id              String        @id @default(uuid())
  name            String
  email           String        @unique
  password        String
  role            String        @default("VIEWER") // ADMIN, ACCOUNTANT, VIEWER
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  journalEntries  JournalEntry[]
}

// Account Head Category (Asset, Liability, Income, Expense, Equity)
model AccountCategory {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  accountHeads AccountHead[]
}

// Account Heads (e.g., Cash, Bank, Accounts Receivable, etc.)
model AccountHead {
  id              String        @id @default(uuid())
  code            String        @unique // For standardized account codes
  name            String
  description     String?
  categoryId      String
  category        AccountCategory @relation(fields: [categoryId], references: [id])
  isCustom        Boolean       @default(false) // To distinguish between standard and custom heads
  parentId        String?       // For hierarchical account structure
  parent          AccountHead?  @relation("SubAccounts", fields: [parentId], references: [id])
  subAccounts     AccountHead[] @relation("SubAccounts")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  journalEntries  JournalEntryItem[]
  ledgerEntries   LedgerEntry[]

  @@index([categoryId])
  @@index([parentId])
}

// Journal Entries
model JournalEntry {
  id          String        @id @default(uuid())
  date        DateTime
  reference   String        @unique // Reference number for the entry
  description String
  status      String        @default("draft") // draft, posted, void
  items       JournalEntryItem[]
  createdBy   String
  user        User         @relation(fields: [createdBy], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([createdBy])
  @@index([date])
  @@index([status])
}

// Journal Entry Items (individual debit/credit lines)
model JournalEntryItem {
  id              String        @id @default(uuid())
  journalEntryId  String
  journalEntry    JournalEntry @relation(fields: [journalEntryId], references: [id])
  accountHeadId   String
  accountHead     AccountHead  @relation(fields: [accountHeadId], references: [id])
  description     String?
  debitAmount     Decimal      @default(0)
  creditAmount    Decimal      @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([journalEntryId])
  @@index([accountHeadId])
}

// Ledger Entries (for running balances)
model LedgerEntry {
  id              String        @id @default(uuid())
  accountHeadId   String
  accountHead     AccountHead  @relation(fields: [accountHeadId], references: [id])
  date            DateTime
  description     String
  debitAmount     Decimal      @default(0)
  creditAmount    Decimal      @default(0)
  balance         Decimal      // Running balance
  reference       String       // Reference to source transaction
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([accountHeadId])
  @@index([date])
}

// Financial Year Settings
model FinancialYear {
  id          String    @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([startDate, endDate])
  @@index([isActive])
}

// Company Settings
model CompanySettings {
  id              String    @id @default(uuid())
  companyName     String
  address         String?
  taxNumber       String?
  phone           String?
  email           String?
  fiscalYearStart DateTime
  baseCurrency    String    @default("INR")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
} 