generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  name                  String
  email                 String         @unique
  password              String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  address               String?
  contactNumber         String?
  gstRegistrationNumber String?
  pan                   String?
  Accounts              Account[]
  Bills                 Bill[]
  OwnerOf               Business[]     @relation("BusinessOwner")
  Invoices              Invoice[]
  JournalEntries        JournalEntry[]
  Transactions          Transaction[]
  Businesses            UserBusiness[]

  @@index([email])
  @@index([pan])
  @@index([gstRegistrationNumber])
}

model Business {
  id                 String              @id @default(uuid())
  name               String
  type               String
  description        String?
  address            String?
  phone              String?
  email              String?
  website            String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  city               String?
  country            String?
  fiscalYearEnd      DateTime?
  fiscalYearStart    DateTime?
  incorporationDate  DateTime?
  ownerId            String
  postalCode         String?
  registrationNumber String?
  state              String?
  taxId              String?
  Accounts           Account[]
  Bills              Bill[]
  Owner              User                @relation("BusinessOwner", fields: [ownerId], references: [id])
  InventoryItems     InventoryItem[]
  InventoryMovements InventoryMovement[] @relation("BusinessToInventoryMovement")
  Invoices           Invoice[]
  JournalEntries     JournalEntry[]
  Locations          Location[]
  PurchaseOrders     PurchaseOrder[]
  SalesOrders        SalesOrder[]
  Transactions       Transaction[]
  Users              UserBusiness[]

  @@index([ownerId])
  @@index([type])
}

model UserBusiness {
  userId     String
  businessId String
  role       String   @default("VIEWER")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(uuid())
  Business   Business @relation(fields: [businessId], references: [id])
  User       User     @relation(fields: [userId], references: [id])

  @@unique([userId, businessId])
  @@index([userId])
  @@index([businessId])
  @@index([role])
}

model AccountType {
  id          String   @id @default(uuid())
  value       String   @unique // asset, liability, equity, revenue, expense
  label       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([value])
  @@index([isActive])
}

model Account {
  id                String             @id @default(uuid())
  name              String
  type              String
  code              String
  userId            String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  businessId        String?
  description       String?
  isActive          Boolean            @default(true)
  Business          Business?          @relation(fields: [businessId], references: [id])
  User              User?              @relation(fields: [userId], references: [id])
  JournalEntryLines JournalEntryLine[]
  Transactions      Transaction[]

  @@index([userId])
  @@index([businessId])
  @@index([type])
  @@index([code])
}

model Transaction {
  id            String    @id @default(uuid())
  date          DateTime
  description   String
  amount        Float
  category      String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  businessId    String?
  notes         String?
  thirdPartyId  String?
  accountId     String
  paymentMethod String?
  reference     String?
  type          String
  Account       Account   @relation(fields: [accountId], references: [id])
  Business      Business? @relation(fields: [businessId], references: [id])
  User          User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([businessId])
  @@index([date])
  @@index([type])
  @@index([category])
}

model JournalEntry {
  id              String             @id @default(uuid())
  date            DateTime
  description     String
  userId          String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  businessId      String?
  billId          String?
  invoiceId       String?
  referenceNumber String?
  status          String             @default("DRAFT")
  Bill            Bill?              @relation(fields: [billId], references: [id])
  Business        Business?          @relation(fields: [businessId], references: [id])
  Invoice         Invoice?           @relation(fields: [invoiceId], references: [id])
  User            User               @relation(fields: [userId], references: [id])
  Lines           JournalEntryLine[]

  @@index([userId])
  @@index([businessId])
  @@index([date])
  @@index([status])
  @@index([invoiceId])
  @@index([billId])
}

model JournalEntryLine {
  id             String       @id @default(uuid())
  journalEntryId String
  accountId      String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  credit         Float        @default(0)
  debit          Float        @default(0)
  Account        Account      @relation(fields: [accountId], references: [id])
  JournalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@index([journalEntryId])
  @@index([accountId])
}

model InventoryItem {
  id                 String              @id @default(uuid())
  sku                String              @unique
  name               String
  description        String?
  category           String?
  unitOfMeasure      String              @default("EACH")
  costMethod         String              @default("FIFO")
  reorderLevel       Float               @default(0)
  reorderQuantity    Float               @default(0)
  isActive           Boolean             @default(true)
  businessId         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Business           Business            @relation(fields: [businessId], references: [id])
  InventoryLevels    InventoryLevel[]
  InventoryMovements InventoryMovement[]
  PurchaseOrderItems PurchaseOrderItem[]
  SalesOrderItems    SalesOrderItem[]

  @@index([businessId])
  @@index([sku])
  @@index([category])
}

model InventoryLevel {
  id              String        @id @default(uuid())
  inventoryItemId String
  locationId      String
  quantity        Float         @default(0)
  unitCost        Float         @default(0)
  totalValue      Float         @default(0)
  lastUpdated     DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  InventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  Location        Location      @relation(fields: [locationId], references: [id])

  @@unique([inventoryItemId, locationId])
  @@index([inventoryItemId])
  @@index([locationId])
}

model InventoryMovement {
  id              String        @id @default(uuid())
  inventoryItemId String
  locationId      String
  movementType    String
  quantity        Float
  unitCost        Float?
  totalValue      Float?
  referenceId     String?
  description     String?
  movementDate    DateTime      @default(now())
  businessId      String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Business        Business      @relation("BusinessToInventoryMovement", fields: [businessId], references: [id])
  InventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  Location        Location      @relation(fields: [locationId], references: [id])

  @@index([inventoryItemId])
  @@index([locationId])
  @@index([movementType])
  @@index([movementDate])
  @@index([businessId])
}

model Location {
  id                 String              @id @default(uuid())
  code               String              @unique
  name               String
  type               String              @default("WAREHOUSE")
  address            String?
  isActive           Boolean             @default(true)
  businessId         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  InventoryLevels    InventoryLevel[]
  InventoryMovements InventoryMovement[]
  Business           Business            @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@index([code])
  @@index([type])
}

model PurchaseOrder {
  id                 String              @id @default(uuid())
  poNumber           String              @unique
  vendorId           String?
  vendorName         String
  orderDate          DateTime            @default(now())
  expectedDate       DateTime?
  status             String              @default("DRAFT")
  totalAmount        Float               @default(0)
  businessId         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Business           Business            @relation(fields: [businessId], references: [id])
  PurchaseOrderItems PurchaseOrderItem[]

  @@index([businessId])
  @@index([poNumber])
  @@index([status])
  @@index([orderDate])
}

model PurchaseOrderItem {
  id               String        @id @default(uuid())
  purchaseOrderId  String
  inventoryItemId  String
  quantity         Float
  unitCost         Float
  totalCost        Float
  receivedQuantity Float         @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  InventoryItem    InventoryItem @relation(fields: [inventoryItemId], references: [id])
  PurchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@index([purchaseOrderId])
  @@index([inventoryItemId])
}

model SalesOrder {
  id              String           @id @default(uuid())
  soNumber        String           @unique
  customerId      String?
  customerName    String
  orderDate       DateTime         @default(now())
  expectedDate    DateTime?
  status          String           @default("DRAFT")
  totalAmount     Float            @default(0)
  businessId      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Business        Business         @relation(fields: [businessId], references: [id])
  SalesOrderItems SalesOrderItem[]

  @@index([businessId])
  @@index([soNumber])
  @@index([status])
  @@index([orderDate])
}

model SalesOrderItem {
  id              String        @id @default(uuid())
  salesOrderId    String
  inventoryItemId String
  quantity        Float
  unitPrice       Float
  totalPrice      Float
  shippedQuantity Float         @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  InventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  SalesOrder      SalesOrder    @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)

  @@index([salesOrderId])
  @@index([inventoryItemId])
}

model Invoice {
  id              String         @id @default(uuid())
  invoiceNumber   String         @unique
  customerId      String?
  issueDate       DateTime       @default(now())
  dueDate         DateTime
  status          String         @default("DRAFT")
  subtotal        Float          @default(0)
  taxAmount       Float          @default(0)
  totalAmount     Float          @default(0)
  notes           String?
  userId          String
  businessId      String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customerAddress String?
  customerEmail   String?
  customerName    String
  customerPhone   String?
  Business        Business       @relation(fields: [businessId], references: [id])
  User            User           @relation(fields: [userId], references: [id])
  InvoiceItems    InvoiceItem[]
  JournalEntries  JournalEntry[]

  @@index([businessId])
  @@index([userId])
  @@index([invoiceNumber])
  @@index([status])
  @@index([issueDate])
  @@index([dueDate])
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String
  quantity    Float    @default(1)
  unitPrice   Float
  taxRate     Float    @default(0)
  taxAmount   Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  totalPrice  Float
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model Bill {
  id             String         @id @default(uuid())
  billNumber     String         @unique
  vendorId       String?
  dueDate        DateTime
  status         String         @default("DRAFT")
  subtotal       Float          @default(0)
  taxAmount      Float          @default(0)
  totalAmount    Float          @default(0)
  notes          String?
  userId         String
  businessId     String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  issueDate      DateTime       @default(now())
  vendorAddress  String?
  vendorEmail    String?
  vendorName     String
  vendorPhone    String?
  Business       Business       @relation(fields: [businessId], references: [id])
  User           User           @relation(fields: [userId], references: [id])
  BillItems      BillItem[]
  JournalEntries JournalEntry[]

  @@index([businessId])
  @@index([userId])
  @@index([billNumber])
  @@index([status])
  @@index([issueDate])
  @@index([dueDate])
}

model BillItem {
  id          String   @id @default(uuid())
  billId      String
  description String
  quantity    Float    @default(1)
  unitPrice   Float
  taxRate     Float    @default(0)
  taxAmount   Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  totalPrice  Float
  Bill        Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)

  @@index([billId])
}
